name: CI Pipeline

on:
  push:
    branches:
      - 'feature/**'
    tags:
      - 'v*'
  pull_request:
    branches:
      - develop
    tags:
      - 'v*'

jobs:
  ai-artifact-scan:
    name: "Esc√°ner anti IA"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Buscar palabras de IA prohibidos
        run: |
          grep -RIE --exclude-dir=.git --exclude-dir=.github \
            -e "chatgpt" -e "bard" -e "as an ai" \
            -e "üß©" -e "üß†" -e "‚úÖ" -e "üß™" . && exit 1 || exit 0

  duplicity-jscpd:
    name: "Duplicidad con jscpd"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Instalar jscpd
        run: npm install -g jscpd
      - name: Ejecutar jscpd (yml, scripts)
        run: |
          jscpd --threshold 30 --min-tokens 10 --pattern "**/*.{yml,sh,py}" --reporters console ./scripts ./tests

  check-comments:
    name: "Verificar comentarios en espa√±ol"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Buscar comentarios en espa√±ol
        run: |
          # Buscar archivos modificados en el PR
          git fetch origin develop:develop
          files=$(git diff --name-only develop...${{ github.sha }})
          fail=0
          for f in $files; do
            case "$f" in
              *.py|*.sh|*.tf|*.yml)
                # Busca alg√∫n comentario en espa√±ol (palabras comunes)
                if ! grep -E -q "#.*(el|la|en|este|funci√≥n|par√°metro|devuelve|configura|script|modifica|comentario)" "$f"; then
                  echo "Falta comentario en espa√±ol en $f"
                  fail=1
                fi
                ;;
            esac
          done
          if [ "$fail" = "1" ]; then exit 1; fi

  test:
    name: "Tests unitarios"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Configurar entorno Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Instalar dependencias Python
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Ejecutando doc_extractor.py para generar archivos de documentaci√≥n
        run: |
          python scripts/doc_extractor.py
      - name: Ejecutar tests unitarios (pytest)
        run: pytest --maxfail=1 --disable-warnings

  live-diagrams:
    name: "Live diagrams, graphviz"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Instalando Graphviz y dependencias
        run: |
          sudo apt-get update
          sudo apt-get install -y graphviz
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Generar diagramas (dot y png)
        run: |
          python scripts/diagram_generator.py
      - name: Subir diagramas como artefactos
        uses: actions/upload-artifact@v4
        with:
          name: live-diagrams
          path: |
            docs/dependencies.dot
            docs/dependencies.png

  lint:
    name: "Linters: flake8, tflint"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Instalar flake8
        run: pip install flake8
      - name: Ejecutar flake8
        run: flake8 .
      - name: Instalando tflint
        run: |
          curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash
      - name: Ejecutando tflint a m√≥dulos terraform 
        run: |
          cd infra/modules
          tflint
  
  generate-docs-on-tag:
    name: "Generar documentaci√≥n por tag"
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - name: Configurar entorno Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Instalar dependencias Python
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Obtener nombre del tag
        run: echo "TAG_NAME=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
      - name: Generar documentaci√≥n para el tag
        run: |
          python scripts/generate_docs.py --output $TAG_NAME
      - name: Commit y push automatico
        uses: stefanzweifel/git-auto-commit-action@v6
        with:
          branch: feature/Prueba-Jharvy
          commit_message: Documentacion automatica de $TAG_NAME
          commit_user_name: Jharvy [github actions]
          commit_user_email: jharvy.cadillo.t@uni.pe
          commit_author: "Jharvy Cadillo <jharvy.cadillo.t@uni.pe>"